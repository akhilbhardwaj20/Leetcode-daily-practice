// Iterative DFS

 public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        // using stack (DFS)
        if(root1 == null) {
            return root2;
        }
        Stack<TreeNode[]> stack = new Stack<>();
        stack.push(new TreeNode[] {root1, root2});
        
        while(!stack.isEmpty()) {
            TreeNode[] t = stack.pop();
            if(t[0] == null || t[1] == null) {
                continue;
            }
            // pop from the top of stack and add the sum of both tree 1 and 2 and save in 1
            t[0].val += t[1].val;
            if(t[0].left == null) {
                t[0].left = t[1].left;
            } else {
                stack.push(new TreeNode[] {t[0].left, t[1].left});
            }
            // similarly check for the right subtree
            if(t[0].right == null) {
                t[0].right = t[1].right;
            } else {
                stack.push(new TreeNode[] {t[0].right, t[1].right});
            }
            
        }
        return root1;
    }
