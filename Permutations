class Solution {
    private List<List<Integer>> res = new ArrayList<>();
     
    public List<List<Integer>> permute(int[] nums) {
        
        boolean []vis = new boolean[nums.length];
        dfs(vis,new ArrayList<>(),nums,res);
        return res;
    }
    
    public void dfs(boolean []vis, List<Integer>current, int[] nums, List<List<Integer>> res) {
        if(current.size() == nums.length) {
            res.add(new ArrayList(current));
            return;
        }
        
        for(int i=0; i < nums.length; i++) {
            if(vis[i] == true) continue;
           current.add(nums[i]);
            vis[i] = true;
            dfs(vis,current,nums,res);
            current.remove(current.size()-1);
            vis[i] = false;
        }
    }
}
