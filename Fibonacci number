public int fib(int n) {
        //  Solution 1 ---->  recursive approach (top down)
        // TC - O(2^n) // sc - O(n) auxiliary stack space 
        if(n == 0) {
            return 0;
        }
        if(n == 1 || n == 2) {
            return 1;
        }
        return fib(n-2) + fib(n-1);
    }
    
    // Solution 2 --> Storing prev values in map as (n, fib(n)) --> (key, value)
     Map<Integer, Integer> map = new HashMap<>();
    public int fib(int n) {
        
        
     // TC : O(n)
    // SC : O(n)
        if(map.containsKey(n)) {
            return map.get(n);
        }
        if(n == 0) {
            return 0;
        } else if(n == 1) {
            return 1;
        } else {
            int fibNo = fib(n-1) + fib(n-2);
            map.put(n, fibNo);
            return fib(n);
        }
    }
    
    // Bottom up DP solution
    // TC - O(n)
    // SC- O(n)
    
    public int fib(int n) {
        if(n <= 1) {
            return n;
        }
        int []dp = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        
        for(int i = 2; i <= n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
    
    // constant extra space solution
    // TC - O(n)
    // SC- O(1)
    
    public int fib(int n) {
        
        if(n <= 1) {
            return n;
        }
        
        int a = 0;
        int b = 1;
        int sum = a + b;
        for(int i = 2; i <= n; i++) {
            sum = a+b;
            a = b;
            b = sum;
        }
        return sum;
    }
    
