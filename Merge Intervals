class Solution {
    public int[][] merge(int[][] intervals) {
        
        // sort acc to starting point in the given 2d array
        Arrays.sort(intervals, (a,b) -> a[0]-b[0]);
        Stack<int[]> stack= new Stack<>();
        
        // push the first elem in the stack
        stack.add(intervals[0]);
        
        for(int i = 0; i < intervals.length; i++) {
            int startpoint2 = intervals[i][0];  //c
            int endpoint2 = intervals[i][1];    //d
            // here we named it as 2 beacuse it is a 2nd interval and what it has been in the                 //stack already is the 1st interval
            
            // now we may want to pop the interval present
            int []popArray =  stack.pop();
            
            // now we name the popped array elem 
            int startpoint1 = popArray[0];  //a
            int endpoint1 = popArray[1];    //b
            
            // now we compare the end points using conditions
            // 1 3        or we can have     1  4
            // 2 4 => 1 4                    2  3   => 1 4 is the merged interval
            
            int endMax = Math.max(endpoint2,endpoint1);
            if(startpoint2 <= endpoint1) {
                // merge 
                int []merge = new int[]{startpoint1,endMax};
                // put the merged array back in stack to compare for the next iteration
                stack.add(merge);
                
            } else {
                // no merge condition
                // put the popped elem bak in stack
                
                stack.add(popArray);
                stack.add(intervals[i]);
            }
        }
        
        // now we need to build the answer array to store all the intervals that are there in         // the stack. So the ans array size would be equual to stack.size()
        
        int [][]ansArray = new int[stack.size()][2];
        // since our first elem is in the bottom of stack so we iterate from last
        
        for(int i = ansArray.length-1; i>=0; i--) {
             int []poparr = stack.pop();
             ansArray[i][0] = poparr[0];
             ansArray[i][1] = poparr[1];
        }
        return ansArray;
    }
}
