/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // Tc - O(n) where n is the length of ll
    // Sc - O(k) 
    public ListNode[] splitListToParts(ListNode head, int k) {
        
        ListNode []ans = new ListNode[k];
        
        int count = 0;
        ListNode curr = head;
        // first, find the length of LL
        while(curr != null) {
            count++;
            curr = curr.next;
        }
        
        //check for any extra node other than equal partition
        int len = count/k;
        int extra = count%k;
        
        // iterate from i = 0 till <k and attach extra nodes to earlier list
        int i =0;
        ListNode temp = head;
        ListNode prev = null;
        
        while(temp != null && i < k) {
            ans[i] = temp;
            for(int j = 0; j < len + (extra > 0 ? 1:0); j++) {
                prev = temp;
                temp = temp.next;
            }
            
            prev.next = null;
            i++;
            extra--;
        }
        return ans;
    }
}
