class Solution {
    // TC - O(m*n) since we are visiting  all cells in the grid only once
    
    // SC - O(m*n) -- queue is used which stores in worst case all the elements of M*N matrix
    public int orangesRotting(int[][] grid) {
        
        Queue<int[]> q = new LinkedList<>();
        int count_of_fresh_orange = 0;
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 2) {
                    q.add(new int[] {i,j});
                } else if(grid[i][j] == 1){
                    count_of_fresh_orange++;
                } 
                    
                
            }
        }
        if (count_of_fresh_orange == 0) return 0;
        int [][]dirs = {{-1,0}, {1,0}, {0,1}, {0,-1}};
        int length = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            length++;
            while(size--> 0) {
                int[] cell = q.poll();  // pull out the curr node (i,j)
                for(int[] dir : dirs) {
                    int nr = cell[0] + dir[0];
                    int nc= cell[1] + dir[1];
                    
                    if(nr<0 || nc<0 || nr>= grid.length 
                       || nc>= grid[0].length || grid[nr][nc] == 0 || grid[nr][nc] == 2) {
                        continue;
                    }
                    // mark the orange as rootten
                    grid[nr][nc] = 2;
                    q.add(new int[] {nr, nc});
                    // reduce the count of fresh oranges by 1
                    count_of_fresh_orange--;
                    
                }
            }
            
        }
        return  count_of_fresh_orange == 0 ? length-1 : -1;
    }
}
